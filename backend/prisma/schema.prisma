// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  telegramId String?  @unique
  username  String?
  firstName String?
  lastName  String?
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[] @relation("ProjectOwner")
  sharedProjects ProjectShare[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  shareCode   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     Int
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks       Task[]  
  shares      ProjectShare[]
  categories  Category[]
}

model ProjectShare {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean?  @default(false)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("categories")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
} 